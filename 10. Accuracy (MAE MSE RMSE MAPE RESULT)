import numpy as np
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from math import sqrt
#import statistics
#from statistics import mean

#MENGHITUNG AKURASI Model Peramalan 1

actual = [0.51315789, 0.77631579, 0.48684211, 0.26315789, 0.27631579, 0.43421053, 0.48684211, 0.36842105, 0.61842105, 0.48684211, 0.25, 0.30263158, 0.60526316, 0.57894737, 0.5, 0.65789474, 0.30263158, 0.38157895, 0.46052632, 0.57894737, 0.76315789, 0.71052632, 0.5, 0.26315789, 0.35526316, 0.30263158, 0.57894737, 0.42105263, 0.44736842, 0.57894737, 0.61842105, 0.53947368, 0.36842105, 0.81578947, 0.75, 0.56578947, 0.69736842, 0.51315789, 0.44736842, 0.51315789, 0.63157895, 0.67105263, 0.46052632, 0.81578947, 0.43421053, 0.60526316, 0.42105263, 0.72368421, 0.69736842, 0.60526316, 0.57894737, 0.36842105, 0.39473684, 0.30263158, 0.39473684, 0.65789474, 0.64473684, 0.53947368, 0.67105263, 0.26315789, 0.31578947, 0.25, 0.21052632, 0.40789474, 0.39473684, 0.30263158, 0.23684211, 0.22368421]
forecast = [0.8790708878630153, 0.8595930536603023, 0.8355630012601104, 0.7277614135417513, 0.7169042438114921, 0.7156902112581447, 0.7982500018571076, 0.6521922304885343, 0.7432285509102315, 0.8115990438591918, 0.8632566205934468, 0.5495893887409187, 0.8009308728943066, 0.8863478351903669, 0.8461708136466038, 0.794466350028507, 0.7568541126536933, 0.7084281393115974, 0.669145920710271, 0.6215413891312269, 0.8784668079461397, 0.5604620807945618, 0.7237610784452231, 0.860155290074073, 0.8560547229798775, 0.7207054756104212, 0.6725540993249428, 0.7358366892551829, 0.7234210802268309, 0.8634941114541335, 0.716649714297387, 0.5251117975273017, 0.6850714641607208, 0.7898639691664168, 0.751786368116249, 0.8611087749763886, 0.6690443059119007, 0.8518820753400136, 0.8206540449338388, 0.7979368333827819, 0.7263325649582232, 0.6509185018403687, 0.7078953603778713, 0.6598649272459425, 0.8633868371779266, 0.7360773063895136, 0.8852000107357859, 0.7716569228959048, 0.8937146862133706, 0.8126095036506261, 0.749040197554775, 0.7796112447484859, 0.7236094891838515, 0.7456521519239412, 0.6435587285217761, 0.7736592266806468, 0.7470861838625548, 0.5957151408574136, 0.7774157972979807, 0.700661588318257, 0.7465280380368654, 0.7118940968469929, 0.7450487781620432, 0.7989863947555984, 0.7844209437430464, 0.7694198029051771, 0.7553640247709276, 0.6539290819537144]

#MAE
mae = mean_absolute_error(actual, forecast)
print('MAE: %f' % mae)

#MSE
mse = mean_squared_error(actual, forecast)
print('MSE: %f' % mse)

#RMSE
mse = mean_squared_error(actual, forecast)
rmse = sqrt(mse)
print('RMSE: %f' % rmse)

#MAPE (Mean Absolute Percentage Error)
actual = np.array([0.51315789, 0.77631579, 0.48684211, 0.26315789, 0.27631579, 0.43421053, 0.48684211, 0.36842105, 0.61842105, 0.48684211, 0.25, 0.30263158, 0.60526316, 0.57894737, 0.5, 0.65789474, 0.30263158, 0.38157895, 0.46052632, 0.57894737, 0.76315789, 0.71052632, 0.5, 0.26315789, 0.35526316, 0.30263158, 0.57894737, 0.42105263, 0.44736842, 0.57894737, 0.61842105, 0.53947368, 0.36842105, 0.81578947, 0.75, 0.56578947, 0.69736842, 0.51315789, 0.44736842, 0.51315789, 0.63157895, 0.67105263, 0.46052632, 0.81578947, 0.43421053, 0.60526316, 0.42105263, 0.72368421, 0.69736842, 0.60526316, 0.57894737, 0.36842105, 0.39473684, 0.30263158, 0.39473684, 0.65789474, 0.64473684, 0.53947368, 0.67105263, 0.26315789, 0.31578947, 0.25, 0.21052632, 0.40789474, 0.39473684, 0.30263158, 0.23684211, 0.22368421])
forecast = np.array([0.8790708878630153, 0.8595930536603023, 0.8355630012601104, 0.7277614135417513, 0.7169042438114921, 0.7156902112581447, 0.7982500018571076, 0.6521922304885343, 0.7432285509102315, 0.8115990438591918, 0.8632566205934468, 0.5495893887409187, 0.8009308728943066, 0.8863478351903669, 0.8461708136466038, 0.794466350028507, 0.7568541126536933, 0.7084281393115974, 0.669145920710271, 0.6215413891312269, 0.8784668079461397, 0.5604620807945618, 0.7237610784452231, 0.860155290074073, 0.8560547229798775, 0.7207054756104212, 0.6725540993249428, 0.7358366892551829, 0.7234210802268309, 0.8634941114541335, 0.716649714297387, 0.5251117975273017, 0.6850714641607208, 0.7898639691664168, 0.751786368116249, 0.8611087749763886, 0.6690443059119007, 0.8518820753400136, 0.8206540449338388, 0.7979368333827819, 0.7263325649582232, 0.6509185018403687, 0.7078953603778713, 0.6598649272459425, 0.8633868371779266, 0.7360773063895136, 0.8852000107357859, 0.7716569228959048, 0.8937146862133706, 0.8126095036506261, 0.749040197554775, 0.7796112447484859, 0.7236094891838515, 0.7456521519239412, 0.6435587285217761, 0.7736592266806468, 0.7470861838625548, 0.5957151408574136, 0.7774157972979807, 0.700661588318257, 0.7465280380368654, 0.7118940968469929, 0.7450487781620432, 0.7989863947555984, 0.7844209437430464, 0.7694198029051771, 0.7553640247709276, 0.6539290819537144])
mape=np.mean(np.abs((actual - forecast) / actual)) * 100
print('MAPE: %f' % mape)

#ACCURACY
#Accuracy= 100-mape
#print('Accuracy: %f' % mape)
